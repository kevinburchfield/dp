import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  permutations: string[] = [];
  superpermutation = '';
  lastExecutionTiming: number;
  preknownSPs = {
    2: '121',
    3: '123121321',
    4: '123412314231243121342132413214321',
    5: '123451234152341253412354123145231425314235142315423124531243512431524312543121345213425134215342135421324513241532413524132541321453214352143251432154321',

  };
  numElements: number;

  generatePermutations(n: number, elements: number[]): void {
    if (n === 1) {
      this.permutations.push(elements.join(''));
    } else {
      for (let i = 0; i < n - 1; i++) {
        this.generatePermutations(n - 1, elements);
        if (n % 2 === 0) {
          [elements[i], elements[n - 1]] = [elements[n - 1], elements[i]];
        } else {
          [elements[0], elements[n - 1]] = [elements[n - 1], elements[0]];
        }
      }
      this.generatePermutations(n - 1, elements);
    }
  }

  generate(n: number): void {
    const start = window.performance.now();
    this.permutations = [];
    this.generatePermutations(n, this.createInitialArray(n));
    const end = window.performance.now();
    this.lastExecutionTiming = end - start;
  }

  createInitialArray(numElements: number): number[] {
    return new Array(numElements)
      .fill(0)
      .map((val, index) => index + 1);
  }

  findSuperpermutation(n: number): void {
    this.superpermutation = '';
    this.numElements = n;
    this.generate(n);
    this.permutations.sort();
    const permutationsClone = [...this.permutations];

    // Get the first permutation because that is going to the first target
    const firstPermutation = permutationsClone[0];
    const permutationLength = firstPermutation.length;

    // Loop over the permutations until there are no more permutations left unplaced
    let overlapResult: [string, number] = [firstPermutation, 0];
    while (permutationsClone.length > 0) {
      // We're on the last permutation
      if (permutationsClone.length === 1) {
        // Handle the unique situation
        this.superpermutation = this.superpermutation
          .concat(permutationsClone[0].substring(permutationLength - 1, permutationLength));
        permutationsClone.pop();
      } else {
        // Remove the permutations from the permutations list
        const indexOfPermutation = permutationsClone.findIndex(p => p === overlapResult[0]);
        permutationsClone.splice(indexOfPermutation, 1);

        // Add the non-overlapping characters to the super permutation
        const nonOverlappingChars = overlapResult[0].substring(overlapResult[1], permutationLength);
        if (overlapResult[1] === 0) {
          this.superpermutation = this.superpermutation.concat(overlapResult[0]);
        } else {
          this.superpermutation = this.superpermutation.concat(nonOverlappingChars);
        }

        overlapResult = this.findLargestOverlap(overlapResult[0], permutationsClone);
      }
    }
  }

  // Find the largest overlap for a given string from the given permutations and return the overlapping permutation
  // And its overlap size
  findLargestOverlap(targetString: string, permutations: string[]): [string, number] {
    // Short circuit when there is only one permutation left
    if (permutations.length === 1) {
      return [permutations[0], permutations[0].length];
    }

    // Create a map with an entry for each length of the chopped permutations
    const map = {};
    const lengthOfString = permutations[0].length;
    // Iterate through the permutation list X - 1 times to fill the map for the chopped lengths
    for (let x = 1; x < lengthOfString; x++) {
      map[lengthOfString - x] = permutations
        .map(p => {
          return {
            perm: p,
            substring: p.substring(0, lengthOfString - x),
          };
        });
    }

    for (const lengthOfSubstring of Object.keys(map).reverse()) {
      const substrings = map[lengthOfSubstring];
      for (const ss of substrings) {
        if (targetString.endsWith(ss.substring)) {
          return [ss.perm, +lengthOfSubstring];
        }
      }
    }
  }
}
